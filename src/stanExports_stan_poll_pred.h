// Generated by rstantools.  Do not edit by hand.

/*
    stanmd is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    stanmd is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with stanmd.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_stan_poll_pred_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_stan_poll_pred");
    reader.add_event(42, 40, "end", "model_stan_poll_pred");
    return reader;
}
#include <stan_meta_header.hpp>
class model_stan_poll_pred : public prob_grad {
private:
        int polls;
        int T;
        matrix_d Y;
        matrix_d sigma;
        double inflator;
        double initial_prior;
        double random_walk_sd;
        double mu_sigma;
public:
    model_stan_poll_pred(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_stan_poll_pred(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_stan_poll_pred_namespace::model_stan_poll_pred";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "polls", "int", context__.to_vec());
            polls = int(0);
            vals_i__ = context__.vals_i("polls");
            pos__ = 0;
            polls = vals_i__[pos__++];
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 8;
            validate_non_negative_index("Y", "T", T);
            validate_non_negative_index("Y", "polls", polls);
            context__.validate_dims("data initialization", "Y", "matrix_d", context__.to_vec(T,polls));
            Y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T, polls);
            vals_r__ = context__.vals_r("Y");
            pos__ = 0;
            size_t Y_j_2_max__ = polls;
            size_t Y_j_1_max__ = T;
            for (size_t j_2__ = 0; j_2__ < Y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Y_j_1_max__; ++j_1__) {
                    Y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("sigma", "T", T);
            validate_non_negative_index("sigma", "polls", polls);
            context__.validate_dims("data initialization", "sigma", "matrix_d", context__.to_vec(T,polls));
            sigma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(T, polls);
            vals_r__ = context__.vals_r("sigma");
            pos__ = 0;
            size_t sigma_j_2_max__ = polls;
            size_t sigma_j_1_max__ = T;
            for (size_t j_2__ = 0; j_2__ < sigma_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < sigma_j_1_max__; ++j_1__) {
                    sigma(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            context__.validate_dims("data initialization", "inflator", "double", context__.to_vec());
            inflator = double(0);
            vals_r__ = context__.vals_r("inflator");
            pos__ = 0;
            inflator = vals_r__[pos__++];
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "initial_prior", "double", context__.to_vec());
            initial_prior = double(0);
            vals_r__ = context__.vals_r("initial_prior");
            pos__ = 0;
            initial_prior = vals_r__[pos__++];
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "random_walk_sd", "double", context__.to_vec());
            random_walk_sd = double(0);
            vals_r__ = context__.vals_r("random_walk_sd");
            pos__ = 0;
            random_walk_sd = vals_r__[pos__++];
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "mu_sigma", "double", context__.to_vec());
            mu_sigma = double(0);
            vals_r__ = context__.vals_r("mu_sigma");
            pos__ = 0;
            mu_sigma = vals_r__[pos__++];
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 16;
            validate_non_negative_index("mu", "T", T);
            num_params_r__ += T;
            current_statement_begin__ = 17;
            num_params_r__ += 1;
            current_statement_begin__ = 18;
            validate_non_negative_index("shrunken_polls", "T", T);
            validate_non_negative_index("shrunken_polls", "polls", polls);
            num_params_r__ += (T * polls);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_stan_poll_pred() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 16;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        validate_non_negative_index("mu", "T", T);
        context__.validate_dims("parameter initialization", "mu", "vector_d", context__.to_vec(T));
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu(T);
        size_t mu_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            mu(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("shrunken_polls")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable shrunken_polls missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("shrunken_polls");
        pos__ = 0U;
        validate_non_negative_index("shrunken_polls", "T", T);
        validate_non_negative_index("shrunken_polls", "polls", polls);
        context__.validate_dims("parameter initialization", "shrunken_polls", "matrix_d", context__.to_vec(T,polls));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> shrunken_polls(T, polls);
        size_t shrunken_polls_j_2_max__ = polls;
        size_t shrunken_polls_j_1_max__ = T;
        for (size_t j_2__ = 0; j_2__ < shrunken_polls_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < shrunken_polls_j_1_max__; ++j_1__) {
                shrunken_polls(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(shrunken_polls);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable shrunken_polls: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 16;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.vector_constrain(T, lp__);
            else
                mu = in__.vector_constrain(T);
            current_statement_begin__ = 17;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 18;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> shrunken_polls;
            (void) shrunken_polls;  // dummy to suppress unused var warning
            if (jacobian__)
                shrunken_polls = in__.matrix_constrain(T, polls, lp__);
            else
                shrunken_polls = in__.matrix_constrain(T, polls);
            // model body
            current_statement_begin__ = 22;
            lp_accum__.add(normal_log<propto__>(get_base1(mu, 1, "mu", 1), initial_prior, mu_sigma));
            current_statement_begin__ = 23;
            lp_accum__.add(student_t_log<propto__>(tau, 4, 0, 5));
            current_statement_begin__ = 25;
            for (int t = 2; t <= T; ++t) {
                current_statement_begin__ = 26;
                lp_accum__.add(normal_log<propto__>(get_base1(mu, t, "mu", 1), get_base1(mu, (t - 1), "mu", 1), random_walk_sd));
            }
            current_statement_begin__ = 30;
            for (int t = 1; t <= T; ++t) {
                current_statement_begin__ = 31;
                for (int p = 1; p <= polls; ++p) {
                    current_statement_begin__ = 32;
                    if (as_bool(logical_neq(get_base1(Y, t, p, "Y", 1), -(9)))) {
                        current_statement_begin__ = 33;
                        lp_accum__.add(normal_log<propto__>(get_base1(Y, t, p, "Y", 1), get_base1(shrunken_polls, t, p, "shrunken_polls", 1), (get_base1(sigma, t, p, "sigma", 1) * inflator)));
                        current_statement_begin__ = 34;
                        lp_accum__.add(normal_log<propto__>(get_base1(shrunken_polls, t, p, "shrunken_polls", 1), get_base1(mu, t, "mu", 1), tau));
                    } else {
                        current_statement_begin__ = 36;
                        lp_accum__.add(normal_log<propto__>(get_base1(shrunken_polls, t, p, "shrunken_polls", 1), 0, 1));
                    }
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("mu");
        names__.push_back("tau");
        names__.push_back("shrunken_polls");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(T);
        dims__.push_back(polls);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_stan_poll_pred_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> mu = in__.vector_constrain(T);
        size_t mu_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            vars__.push_back(mu(j_1__));
        }
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> shrunken_polls = in__.matrix_constrain(T, polls);
        size_t shrunken_polls_j_2_max__ = polls;
        size_t shrunken_polls_j_1_max__ = T;
        for (size_t j_2__ = 0; j_2__ < shrunken_polls_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < shrunken_polls_j_1_max__; ++j_1__) {
                vars__.push_back(shrunken_polls(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_stan_poll_pred";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t shrunken_polls_j_2_max__ = polls;
        size_t shrunken_polls_j_1_max__ = T;
        for (size_t j_2__ = 0; j_2__ < shrunken_polls_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < shrunken_polls_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "shrunken_polls" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t mu_j_1_max__ = T;
        for (size_t j_1__ = 0; j_1__ < mu_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t shrunken_polls_j_2_max__ = polls;
        size_t shrunken_polls_j_1_max__ = T;
        for (size_t j_2__ = 0; j_2__ < shrunken_polls_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < shrunken_polls_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "shrunken_polls" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_stan_poll_pred_namespace::model_stan_poll_pred stan_model;
#endif
